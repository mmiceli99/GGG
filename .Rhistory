step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
View(baked)
source("C:/School/Stat348/AmazonEmployeeAccess/Amazon_eda.R")
ggplot(data = ama_train) +
geom_count(mapping = aes(x = ama_train$ROLE_ROLLUP_1, y = ama_train$ROLE_ROLLUP_1))
ggplot(data = ama_train) +
geom_count(mapping = aes(x = ama_train$ROLE_ROLLUP_1, y = ama_train$ROLE_TITLE))
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION))
ggplot(ama_train) +
geom_box(aes(x=ama_train$RESOURCE, y = ACTION))
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
# ggplot(ama_train) +
#   geom_bar(aes(x=ama_train$ACTION))
#
# ggplot(ama_train) +
#   geom_box(aes(x=ama_train$RESOURCE, y = ACTION))
#
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
model <- glm(ACTION ~ ., data = ama_train, family = "binomial")
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
# Fit logistic regression model
my_mod <- glm(ACTION ~ ., data = ama_train, family = "binomial")
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
# Fit logistic regression model
my_mod <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate(ACTION = as.factor(ACTION)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) #%>%
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate(ACTION = as.factor(ama_train$ACTION)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) #%>%
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_num2factor(ACTION) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_num2factor(ACTION, levels=2) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_num2factor(ACTION, levels=c(2)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_num2factor(ACTION, levels=c(1,2)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_num2factor(ACTION, levels=c(1:2)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_num2factor(ACTION, levels=c('1', '2')) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_num2factor(ACTION, levels=c('1', '0')) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_num2factor(ACTION, levels=c('0', '1')) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate(Action = as.factor(ACTION)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data=ama_train)
# Fit logistic regression model
my_model <- logistic_reg(Action ~ .) %>%
set_engine('glm')
# Fit logistic regression model
my_model <- logistic_reg(Action ~ .) %>%
set_engine('glm')
?logicstic_reg
?logicstic_reg()
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data=ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate(ACTION = as.factor(ACTION)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) #%>%
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate(Id = row_number()) %>%
rename(ACTION =.pred) %>%
select(Id, Action)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
# ggplot(ama_train) +
#   geom_bar(aes(x=ama_train$ACTION))
#
# ggplot(ama_train) +
#   geom_box(aes(x=ama_train$RESOURCE, y = ACTION))
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate(ACTION = as.factor(ACTION)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate(Id = row_number()) %>%
rename(ACTION =.pred) %>%
select(Id, Action)
my_recipe <- recipe(ACTION ~ ., data = ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>%
step_other(all_nominal_predictors(), threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
# Apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data = ama_train)
my_recipe <- recipe(ACTION ~ ., data = ama_train) %>%
step_mutate(ACTION = as.factor(ACTION)) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>%
step_other(all_nominal_predictors(), threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
# Apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data = ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate(Id = row_number()) %>%
rename(ACTION =.pred) %>%
select(Id, Action)
my_recipe <- recipe(ACTION ~ ., data = ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>%
step_other(all_nominal_predictors(), threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
# Apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_model <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_model) %>%
fit(data = ama_train)
library(tidyverse)
library(vroom)
setwd("C:/School/Stat348/GGG")
train <- vroom('test.csv')
train <- vroom('train.csv')
test <- vroom('test.csv')
View(train)
View(test)
View(train)
View(test)
View(train)
boxplot(x=train$has_soul, y=train$type)
boxplot(x=train$has_soul)
boxplot(x=train$has_soul, train$type)
boxplot()?
?boxplot()
?boxplot
boxplot(has_soul ~ type, data=train)
boxplot(bone_length ~ type, data=train)
boxplot(hair_length ~ type, data=train)
boxplot(rotting_flesh ~ type, data=train)
hist(color~type, data=train)
summary(train)
ggplot(data=train) +
geom_bar(mapping = aes(x=color, y=count))
geom_bar(mapping = aes(x=color)
ggplot(data=train) +
ggplot(data=train) +
geom_bar(mapping = aes(x=color))
ggplot(data=train) +
geom_bar(mapping = aes(x=color), col=type)
ggplot(data=train) +
geom_bar(mapping = aes(x=color), fil=type)
ggplot(data=train) +
geom_bar(mapping = aes(x=color), fill=type)
ggplot(data=train) +
geom_bar(mapping = aes(x=color), fill=train$type)
ggplot(data=train) +
geom_bar(mapping = aes(x=color, fill=train$type))
ggplot(data=train) +
geom_bar(mapping = aes(x=color, fill=train$type), position = 'dodge')
ggplot(train) +
geom_point(mapping=aes(x=hair_length, y = has_soul, col=type))
missing <- vroom('trainWithMissingValues')
missing <- vroom('trainWithMissingValues.csv')
View(missing)
recipe <- recipe(type ~ ., data=train) %>%
step_impute_mean()
summary(missing)
recipe <- recipe(type ~ ., data=train) %>%
step_impute_mean(hair_length)
library(tidymodels)
recipe <- recipe(type ~ ., data=train) %>%
step_impute_mean(hair_length)
baked <- bake(prep, new_data = train)
prep <- prep(my_recipe)
baked <- bake(prep, new_data = train)
recipe <- recipe(type ~ ., data=train) %>%
step_impute_mean(hair_length)
prep <- prep(my_recipe)
my_recipe <- recipe(type ~ ., data=train) %>%
step_impute_mean(hair_length)
prep <- prep(my_recipe)
baked <- bake(prep, new_data = train)
rmse_vec(trainSet[is.na(missing)], imputedSet[is.na[missing]])
rmse_vec(train[is.na(missing)], bakedt[is.na[missing]])
rmse_vec(train[is.na(missing)], baked[is.na[missing]])
my_recipe <- recipe(type ~ ., data=train) %>%
step_impute_mean(hair_length) %>%
step_impute_mean(rotting_flesh) %>%
step_impute_mean(bone_length) %>%
prep <- prep(my_recipe)
my_recipe <- recipe(type ~ ., data=train) %>%
step_impute_mean(hair_length) %>%
step_impute_mean(rotting_flesh) %>%
step_impute_mean(bone_length) %>%
prep <- prep(my_recipe)
library(tidyverse)
library(vroom)
library(tidymodels)
train <- vroom('train.csv')
test <- vroom('test.csv')
missing <- vroom('trainWithMissingValues.csv')
my_recipe <- recipe(type ~ ., data=missing) %>%
step_impute_mean(hair_length) %>%
step_impute_mean(rotting_flesh) %>%
step_impute_mean(bone_length) %>%
prep <- prep(my_recipe)
my_recipe <- recipe(type ~ ., data=missing) %>%
step_impute_mean(hair_length) %>%
step_impute_mean(rotting_flesh) %>%
step_impute_mean(bone_length)
prep <- prep(my_recipe)
baked <- bake(prep, new_data = train)
rmse_vec(train[is.na(missing)], baked[is.na[missing]])
View(baked)
View(baked)
View(missing)
View(baked)
rmse_vec(train[is.na(missing)], baked[is.na(missing)])
baked[is.na(missing)]
train[is.na(missing)]
rmse_vec(train[is.na(missing)], baked)
rmse_vec(train[is.na(missing)], baked[is.na(missing)])
is.na(missing)
baked <- bake(prep, new_data = missing)
rmse_vec(train[is.na(missing)], baked[is.na(missing)])
#impute_knn
my_recipe <- recipe(type ~ ., data=missing) %>%
step_impute_knn(hair_length, k=5) %>%
step_impute_knn(rotting_flesh, k=5) %>%
step_impute_knn(bone_length, k=5)
prep <- prep(my_recipe)
baked <- bake(prep, new_data = missing)
#impute_knn
my_recipe <- recipe(type ~ ., data=missing) %>%
step_impute_knn(hair_length, k=5) %>%
step_impute_knn(rotting_flesh, k=5) %>%
step_impute_knn(bone_length, k=5)
prep <- prep(my_recipe)
#impute_knn
my_recipe <- recipe(type ~ ., data=missing) %>%
step_impute_bag(hair_length,  trees=5) %>%
step_impute_bag(rotting_flesh, trees=5) %>%
step_impute_bag(bone_length,  trees=5)
prep <- prep(my_recipe)
baked <- bake(prep, new_data = missing)
rmse_vec(train[is.na(missing)], baked[is.na(missing)])
#impute_knn
my_recipe <- recipe(type ~ ., data=missing) %>%
step_impute_bag(hair_length,  trees=100) %>%
step_impute_bag(rotting_flesh, trees=100) %>%
step_impute_bag(bone_length,  trees=100)
prep <- prep(my_recipe)
baked <- bake(prep, new_data = missing)
rmse_vec(train[is.na(missing)], baked[is.na(missing)])
#impute_knn
my_recipe <- recipe(type ~ ., data=missing) %>%
step_impute_bag(hair_length,  trees=1000) %>%
step_impute_bag(rotting_flesh, trees=1000) %>%
step_impute_bag(bone_length,  trees=1000)
prep <- prep(my_recipe)
baked <- bake(prep, new_data = missing)
rmse_vec(train[is.na(missing)], baked[is.na(missing)])
is.na(missing)
train[is.na(missing)]
baked[is.na(missing)]
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
library(doParallel)
library(themis)
#parallel::detectCores() #How many cores do I have?
cl <- makePSOCKcluster(13) # num_cores to use
registerDoParallel(cl)
train <- vroom("./train.csv")
test <- vroom("./test.csv")
train <- train %>%
mutate(type = as.factor(type))
my_recipe <- recipe(type ~ ., data=train) %>%
update_role(id, new_role = "id variable") %>%
step_mutate_at(color, fn = factor) %>%# turn color into factors
step_lencode_glm(color, outcome=vars(type))
#step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(color) # dummy variable encoding
#step_lencode_mixed(color, outcome = vars(type)) #%>% #target encoding
#step_smote(all_outcomes(), k=2)
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = train)
my_mod <- rand_forest(mtry = tune(),
min_n=tune(),
trees=1000) %>%
set_engine("ranger") %>%
set_mode("classification")
GGG_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range=c(1,10)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
## Split data for CV
folds <- vfold_cv(train, v = 5, repeats=1)
## Run the CV
CV_results <- GGG_workflow %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics=metric_set(accuracy)) #Or leave metrics NULL
## Find Best Tuning Parameters
bestTune <- CV_results %>%
select_best()
## Finalize the Workflow & fit it
final_wf <-
GGG_workflow %>%
finalize_workflow(bestTune) %>%
fit(data=train)
## Predict
ama_predictions <- predict(final_wf, new_data=test, type='class') %>%
rename(type=.pred_class) %>%
mutate(id = test$id) %>%
select(id, type)
vroom_write(x=ama_predictions, file="./RandFor.csv", delim=",")
stopCluster(cl)
